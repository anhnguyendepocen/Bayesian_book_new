plot(Z,label = metabolites$sex)
plot(Z,label = metabolites$age)
plot(Z,label = metabolites$bmi)
mean(data)
means<-mean(data)
means<-as.vector(mean(data))
means
means<-colmeans(data)
means<-colMeans(data)
means
stdev<-std(data)
stdev<-sd(data)
stdve<-sapply(sd,data)
help(sapply)
stdve<-sapply(data,sd)
stdev<-sapply(data,sd)
stan_data<-sapply(data,function(x) (x - means)/stdev )
View(stan_data)
View(data)
data.pca=prcomp(stan_data)
plot(data.pca$x[,1],data.pca$x[,2],xlab='FirstPC',ylab='SecondPC')
case_indx=which(met_syn=='case')
case_indx=which(metabolites$met_syn=='case')
control_indx=which(metabolites$met_syn=='control')
points(data.pca$x[case_indx,1],data.pca$x[case_indx,2],col='red')
points(data.pca$x[control_indx,1],data.pca$x[control_indx,2],col='blue')
data.pca$x
length(data.pca$x)
plot(data.pca,label = metabolites$bmi)
plot(data.pca$x[1,],data.pca$x[2,],xlab='FirstPC',ylab='SecondPC')
plot(data.pca$x[,1],data.pca$x[,2],xlab='FirstPC',ylab='SecondPC')
data.pca$x[,1]
length(data.pca$x[,1])
length(data.pca$x[1,])
length(data.pca$x[,1])
help(prcomp)
plot(data.pca,type="l")
biplot(prcomp(stan_data,scale.=TRUE),cex=c(0.5,0.75))
biplot(prcomp(stan_data,scale.=TRUE))
help(state.x77)
state1<-state(x77)
state1<-state.x77
View(state1)
help(prcomp)
data.pca=prcomp(stan_data,scale.=TRUE)
plot(data.pca$x[,1],data.pca$x[,2],xlab='FirstPC',ylab='SecondPC')
case_indx=which(metabolites$met_syn=='case')
control_indx=which(metabolites$met_syn=='control')
points(data.pca$x[case_indx,1],data.pca$x[case_indx,2],col='red')
points(data.pca$x[control_indx,1],data.pca$x[control_indx,2],col='blue')
data.pca=prcomp(data,scale.=TRUE)
plot(data.pca$x[,1],data.pca$x[,2],xlab='FirstPC',ylab='SecondPC')
case_indx=which(metabolites$met_syn=='case')
control_indx=which(metabolites$met_syn=='control')
points(data.pca$x[case_indx,1],data.pca$x[case_indx,2],col='red')
points(data.pca$x[control_indx,1],data.pca$x[control_indx,2],col='blue')
data.pca$loadings
data.pca.loadings
loadings(data.pca)
data.pca$loadings
data.pca=prcomp(data,scale.=TRUE)
plot(data.pca$x[,1],data.pca$x[,2],xlab='FirstPC',ylab='SecondPC')
case_indx=which(metabolites$met_syn=='case')
control_indx=which(metabolites$met_syn=='control')
points(data.pca$x[case_indx,1],data.pca$x[case_indx,2],col='red')
points(data.pca$x[control_indx,1],data.pca$x[control_indx,2],col='blue')
data.pca$loadings
pca=prcomp(data,scale.=TRUE)
pca$loadings
class(pca$loadings)
pca$loadings
class(data.pca$loadings)
data.pca$loadings
data.pca$rotation
length(data.pca$rotation)
length(data.pca[,1]$rotation)
length(data.pca[,1]$loadings)
data.pca[,1]
data.pca$x[,1]
data.pca$x
data.pca$x$loadings
loadings(data.pca)
summary(data.pca)
plot(as.dendrogram(Z))
plot(Z,label = metabolites$met_syn)
inde_variable<-metabolites$bmi
for (i in 1:163)
{
de_variable<-data[,i]
model<-lm(de_variables~inde_variable)
}
inde_variable<-metabolites$bmi
de_variable<-data[,1]
help(lm)
model<-lm(de_variable~inde_variable)
summary(model)
model.F
summary(model)$r.squared
inde_variable<-metabolites$bmi
r_squared<-vector()
for (i in 1:163)
{
de_variable<-data[,i]
model<-lm(de_variable~inde_variable)
r_squared[i]<-summary(model)$r.squared
}
r_squared
r_squared*100
plot(as.dendrogram(Z))
plot(Z,label = r_squared)
help(vclust)
Z=hclust(distance,method='average')
distance<-dist(data,method='manhattan')
X<-squareform(as.vector(distance))
distance<-dist(data,method='manhattan',2)
X<-squareform(as.vector(distance))
View(X)
distance<-dist(data,method='manhattan',1)
X<-squareform(as.vector(distance))
data_t<- as.data.frame(t(data))
View(data_t)
distance<-dist(data_t,method='manhattan',1)
X<-squareform(as.vector(distance))
Z=hclust(distance,method='average')
plot(as.dendrogram(Z))
plot(Z,label = r_squared)
order(Z)
order.dendrogram(Z)
Z=as.dendrogram(Z)
plot(Z,label = r_squared)
order.dendrogram(Z)
plot(orders,r_squared)
orders<-order.dendrogram(Z)
plot(orders,r_squared)
model2<-lm(r_squared~orders)
summary(model2)
inde_variable1<-metabolites$bmi
inde_variable2<-metabolites$age
inde_variable3<-metabolites$sex
r_squared2<-vector()
for (i in 1:163)
{
de_variable<-data[,i]
model<-lm(de_variable~inde_variable1+inde_variable2+inde_variable3)
r_squared2[i]<-summary(model)$r.squared
}
r_squared
plot(orders,r_squared2)
resid(model)
plot(model)
plot(model)
summary(model)
imagesc(r_squared2)
image(r_squared2)
plot(r_squared2)
plot(r_squared)
de_variable<-metabolites$met_syn
for (i in 1:163)
{
inde_variable<-data[,i]
model<-glm(de_variable~inde_variable,family="binomial")
r_squared3[i]<-summary(model)$r.squared
}
de_variable<-metabolites$met_syn
r_squared3<-vector()
for (i in 1:163)
{
inde_variable<-data[,i]
model<-glm(de_variable~inde_variable,family="binomial")
r_squared3[i]<-summary(model)$r.squared
}
model(summary)
summary(model)
de_variable<-metabolites$met_syn
r_squared3<-vector()
for (i in 1:163)
{
inde_variable<-data[,i]
model<-glm(de_variable~inde_variable,family="binomial")
r_squared3[i]<-extractAIC(model)
}
r_squared3
summary(model)
extractAIC(model)
extractAIC(model)[[2]]
de_variable<-metabolites$met_syn
r_squared3<-vector()
for (i in 1:163)
{
inde_variable<-data[,i]
model<-glm(de_variable~inde_variable,family="binomial")
r_squared3[i]<-extractAIC(model)[[2]]
}
r_squared3
de_variable<-metabolites$met_syn
r_squared3<-vector()
r_squared4<-vector()
for (i in 1:163)
{
inde_variable<-data[,i]
model<-glm(de_variable~inde_variable,family="binomial")
model2<-lm(de_variable~inde_variable)
r_squared3[i]<-extractAIC(model)[[2]]
r_squared4[i]<-summary(model)$r.squared
}
plot(r_squared3,r_squared4)
de_variable<-metabolites$met_syn
r_squared3<-vector()
r_squared4<-vector()
for (i in 1:163)
{
inde_variable<-data[,i]
model<-glm(de_variable~inde_variable,family="binomial")
model2<-lm(de_variable~inde_variable)
r_squared3[i]<-extractAIC(model)[[2]]
r_squared4[i]<-summary(model2)$r.squared
}
plot(r_squared3,r_squared4)
s_sq
r_squared4
de_variable<-metabolites$met_syn
r_squared3<-vector()
r_squared4<-vector()
for (i in 1:163)
{
inde_variable<-data[,i]
model<-glm(de_variable~inde_variable,family="binomial")
model2<-lm(as.factor(de_variable)~inde_variable)
r_squared3[i]<-extractAIC(model)[[2]]
r_squared4[i]<-summary(model2)$r.squared
}
plot(r_squared3,r_squared4)
as.factor(metabolites$met_syn)
as.numeric(metabolites$met_syn)
de_variable<-metabolites$met_syn
r_squared3<-vector()
r_squared4<-vector()
for (i in 1:163)
{
inde_variable<-data[,i]
model<-glm(de_variable~inde_variable,family="binomial")
model2<-glm((as.numeric(de_variable)-1)~inde_variable)
r_squared3[i]<-extractAIC(model)[[2]]
r_squared4[i]<-summary(model2)$r.squared
}
plot(r_squared3,r_squared4)
as.numeric(metabolites$met_syn)-1
model2<-glm((as.numeric(de_variable)-1)~inde_variable)
summary(model2)
help(glm)
de_variable<-metabolites$met_syn
r_squared3<-vector()
r_squared4<-vector()
for (i in 1:163)
{
inde_variable<-data[,i]
model<-glm(de_variable~inde_variable,family="binomial")
model2<-glm((as.numeric(de_variable)-1)~inde_variable,family="gaussian")
r_squared3[i]<-extractAIC(model)[[2]]
r_squared4[i]<-summary(model2)$r.squared
}
plot(r_squared3,r_squared4)
de_variable<-metabolites$met_syn
r_squared3<-vector()
r_squared4<-vector()
for (i in 1:163)
{
inde_variable<-data[,i]
model<-glm(de_variable~inde_variable,family="binomial")
model2<-lm((as.numeric(de_variable)-1)~inde_variable)
r_squared3[i]<-extractAIC(model)[[2]]
r_squared4[i]<-summary(model2)$r.squared
}
plot(r_squared3,r_squared4)
de_variable<-metabolites$met_syn
inde_variable2<-metabolites$age
inde_variable3<-metabolites$bmi
r_squared5<-vector()
r_squared6<-vector()
for (i in 1:163)
{
inde_variable1<-data[,i]
model<-glm(de_variable~inde_variable1+inde_variable2+inde_variable3,family="binomial")
model2<-lm((as.numeric(de_variable)-1)~inde_variable1+inde_variable2+inde_variable3)
r_squared5[i]<-extractAIC(model)[[2]]
r_squared6[i]<-summary(model2)$r.squared
}
plot(r_squared5,r_squared6)
data.pca$x[,1],
data.pca$x[,1]
model3<-lm(metabolites$bmi,data.pca$x[,1])
model3<-lm(metabolites$bmi~data.pca$x[,1])
summary(model3)
model3<-lm(metabolites$bmi~data.pca$x[,1]+data.pca$x[,2])
summary(model3)
model3<-lm(metabolites$bmi~data.pca$x[,1]+data.pca$x[,2]+data.pca$x[,3])
summary(model3)
model3<-lm(metabolites$bmi~data.pca$x[,1]+data.pca$x[,2]+data.pca$x[,3]+data.pca$x[,4])
summary(model3)
model3<-lm(metabolites$bmi~data.pca$x[,1]+data.pca$x[,2]+data.pca$x[,3]+data.pca$x[,4]+data.pca$x[,5])
summary(model3)
model4<-lm(metabolites$bmi~data.)
model4<-lm(metabolites$bmi~data)
MFDU <- cbind(metabolites$bmi, data)
model4<-lm(bmi~.)
MFDU <- cbind(metabolites$bmi, data)
model4<-lm(bmi~.,data=MFDU)
View(MFDU)
model4<-lm(metabolites$bm~.,data=MFDU)
summary(model4)
B <- read.csv(file.choose())
View(B)
plot(earnings,education)
detach(A)
attach(B)
plot(earnings,education)
View(B)
plot(salary,education)
model1<-lm(salary~education,data=A)
model1<-lm(salary~education,data=B)
summary(model1)
plot(education,salary)
plot(model1)
plot(model1)
plot(education,salary)
abline(lm(salary ~ education))
library(lmtest)
bptest(salary~education)
reset(model1)
help(reset)
reset(model1,power=2:3)
C<-read.csv(file.choose())
View(C)
plot(C)
corr(C)
cor(C)
detach(B)
attach(C)
model2<-lm(forest~crops)
model3<-lm(forest~pasture)
summary(model2)
summary(model3)
plot(forest)
require(ggplot2)
model4<-lm(forest~pasture+crops)
summary(model4)
quartz
# Non-linear Model Example - Bruchid Data and Fitting Algorithm - R Code
#read in bruchid data and plot time series
quartz()
par(mfrow=c(1,1))
bruchids<-scan("bruchids.txt")
plot(1:length(bruchids),bruchids,xlab="Time (Weeks)", ylab="Abundance
(Alive Counts)",type="b")
bruchids<-log(bruchids)
#define Poisson likelihood function for correlated errors with unknown
parameter vector p
#define the model as a non-linear density-dependent model
fn=function(p){
mod=array(0,dim=c(77))
mod[1]=(p[1]^(1/p[3])-1)/p[2]
tmp=0
for(i in 2:77){
mod[i]=p[1]*mod[i-1]/(1+p[2]*mod[i-1])^p[3]
likl=(lfactorial(bruchids[i])+mod[i]-log(mod[i])*bruchids[i])
tmp=tmp+likl}
tmp+(lfactorial(bruchids[1])+mod[1]-log(mod[1])*bruchids[1])
}
#define the initial parameter set
p<-c(2.75,0.03,1.0)
#use appropriate optimization routine (in R - default is Nelder-Mead)
out=optim(p,fn)
#displays parameter estimates
out$par
#produces one-step ahead predictions from ML parameter estimates
x=array(0,dim=c(77))
x[1]=mean(bruchids)
for(i in 2:77)
x[i]<-out$par[1]*bruchids[i-1]/(1+out$par[2]*bruchids[i-1])^out$par
[3]
plot(seq(1,77,length=10),seq
(1,5,length=10),type="n",bty="l",xlab="Time(Weeks)",ylab="log(Abundance)")
lines(c(1:77),bruchids,lwd=2,col="purple")
points(c(1:77),x,pch=19,cex=1.0)
quartz()
par(mfrow=c(1,2))
plot(c(1:77),bruchids-x,type="p",bty="l",xlab="Time",ylab="Raw
Residuals",pch=19,cex=1.0)
plot(x,bruchids-x,type="p",bty="l",xlab="Fitted Values",ylab="Raw
Residuals",pch=19,cex=1.0)
help(quartz)
model5<-lm(price~.,data=E)
A<-read.csv(file.choose())
View(A)
A<-read.csv(file.choose())
B<-A[,1:12]
# Question 1
model1 <- lm(price~.,data=B)
sum_mod1<-summary(model1)
summary(model1)
help(write.table)
# Question 3 - omitting bedrdooms (at 90% level would not omit them)
model2 <- lm(price~size+bathrooms+stories+drive+recreation+basement+gas+airc+garage+location,data=B)
summary(model2)
# Question 4 - variance inflation factors and correlations
library(car)
vif(model1)
cor(B[,2:12])
# Question 5 - including cross
C<-A[,1:13]
model3 <- lm(price~.,data=C)
summary(model3)
# Question 6 - including the square of the variable
size_sq=A[,2]*A[,2]
D<-cbind(C,size_sq)
model4 <- lm(price~.,data=D)
summary(model4)
# Question 7 - logged vs non-logged
lprice<-log(D[,1])
E<-D
E[,1]<-lprice
model5<-lm(price~.,data=E)
summary(model5)
F <- A
F[,1]<-lprice
model6<-lm(price~.,data=F)
summary(model6)
model6<-lm(price~size+bedrooms+bathrooms+stories+drive+recreation+basement+gas+airc+garage+location+location_size+bedrooms_sq+bathrooms_sq+stories_sq+garage_sq,data=train)
model6<-lm(price~size+bedrooms+bathrooms+stories+drive+recreation+basement+gas+airc+garage+location+location_size+bedrooms_sq+bathrooms_sq+stories_sq+garage_sq,data=F)
summary(model6)
model6<-lm(price~size+bedrooms+bathrooms+stories+drive+recreation+basement+gas+airc+garage+location+location_size+bedrooms_sq+stories_sq+garage_sq,data=F)
summary(model6)
model6<-lm(price~size+bedrooms+bathrooms+stories+drive+recreation+basement+gas+airc+garage+location+location_size+bedrooms_sq+garage_sq,data=F)
summary(model6)
model6<-lm(price~size+bedrooms+bathrooms+stories+drive+recreation+basement+gas+airc+garage+location+location_size+garage_sq,data=F)
model6<-lm(price~size+bedrooms+bathrooms+stories+drive+recreation+basement+gas+airc+garage+location+location_size+garage_sq,data=F)
summary(model6)
model6<-lm(price~size+bedrooms+bathrooms+stories+drive+recreation+basement+gas+airc+garage+location+garage_sq,data=F)
summary(model6)
model6<-lm(price~size+bedrooms+bathrooms+stories+drive+recreation+basement+gas+airc+garage+location+garage_sq+location_size,data=F)
summary(model6)
model6<-lm(price~size+bedrooms+bathrooms+stories+drive+recreation+basement+gas+airc+garage+location+garage_sq+size_sq,data=F)
summary(model6)
model6<-lm(price~size+bedrooms+bathrooms+stories+drive+recreation+basement+gas+airc+garage+location+garage_sq+size_sq+stories_sq,data=F)
summary(model6)
model6<-lm(price~size+bedrooms+bathrooms+stories+drive+recreation+basement+gas+airc+garage+location+garage_sq+size_sq,data=F)
summary(model6)
model6<-lm(price~size+bedrooms+bathrooms+stories+drive+recreation+basement+gas+airc+garage+location+garage_sq+size_sq+location*size,data=F)
summary(model6)
model6<-lm(price~size+bedrooms+bathrooms+stories+drive+recreation+basement+gas+airc+garage+location+garage_sq+size_sq+location_size,data=F)
summary(model6)
model6<-lm(price~size+bedrooms+bathrooms+stories+drive+recreation+basement+gas+airc+garage+location+garage_sq+size_sq,data=F)
summary(model6)
library(lmtest)
resettest(model6)
resettest(model6,power=2:3)
bptest(model6)
install.packages('ggplot2')
library(ggplot2)
help(qplot)
qplot(v.x,v.y)
rm(list=ls())
install.packages('ggplot2')
library(ggplot2)
# Parameters of the negative binomial
c.r <- 3
c.p <- 0.5
# Generate plot data
v.x <- 0:200
v.y <- dnbinom(v.x,c.r,1-c.p)
# Plot the data
lineWidth <- 3
labelFontSize <- 1.5
tickFontSize <- 2
titleFontSize <- 2
plot(v.x,v.y,type="o", col="blue",col.lab="red", xlab="",ylab="",lwd=lineWidth,
cex.lab=labelFontSize,cex.axis=tickFontSize,xlim=c(0,20))
title(main="Negative binomial pdf", col.main="orange", font.main=4,cex.main=titleFontSize)
mean <- (1/sum(v.y))*sum(v.x*v.y)
qplot(v.x,v.y)
qplot(v.x,v.y,data = Orange, geom = c("point", "line"))
qplot(v.x,v.y, geom = c("point", "line"))
qplot(v.x,v.y,geom = c("point", "line"),colour="blue")
qplot(v.x,v.y,geom = c("point", "line"),colour="blue")
geom_line(colour="red", linetype="dotted", size=1.5)
qplot(v.x,v.y,geom = c("point", "line")) +
geom_line(colour="red", linetype="dotted", size=1.5)
qplot(v.x,v.y,geom = c("point", "line")) +
geom_line(colour="red", size=1.5)
qplot(v.x,v.y,geom = c("point", "line")) +
geom_line(colour="red", size=1.5) +
geom_point(colour="red", size=4, shape=21, fill="white")
qplot(v.x,v.y,geom = c("point", "line")) +
geom_line(colour="red", size=1.5) +
geom_point(colour="blue", size=4, shape=21, fill="white")
rm(list=ls())
setwd("C:/Users/Ben/Dropbox/Bayesian book/Figures/")
setwd("~/Dropbox/Bayesian book/Figures")
library('rstan')
library('R.matlab')
library('boot')
library('pracma')
library('pscl')
library('actuar')
library('VisCov')
fit <- stan(file = 's_Distributions_LKJ_testing.stan', algorithm="Fixed_param",
iter =2000000, chains = 1,seed=1,warmup=2000000)
fitData <- as.data.frame(fit)
fit <- stan(file = 's_Distributions_LKJ_testing.stan', algorithm="Fixed_param",
iter =2000000, chains = 1,seed=1,warmup=1)
fitData <- as.data.frame(fit)
write.csv(file="s_Distributions_LKJ.csv",fitData)
